apply plugin: 'java'

apply plugin: 'application'

mainClassName = "quasarstocks.Application"

version             = '0.1.0-SNAPSHOT'
status              = 'integration'
description         = 'Quasar WebActors StockActors'

ext.classifier      = ':jdk8' // ''
sourceCompatibility = 1.8     // 1.7
targetCompatibility = 1.8     // 1.7

ext.slf4jVer        = '1.7.12'
ext.servletVer      = '3.0.1'
ext.comsatVer       = '0.5.0'
ext.quasarVer       = '0.7.3'
ext.jacksonVer      = '2.5.4'
ext.junitVer        = '4.12'
ext.asmVer          = '5.0.4'
ext.jerseyVer       = '2.18'
ext.httpClientVer   = '4.5'
ext.httpCoreVer     = '4.4.1'

ext.capsuleVersion  = '1.0-rc2-SNAPSHOT'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

configurations {
    quasar
    provided
	capsule
	capsuleMaven
}

sourceSets {
    main.compileClasspath = main.compileClasspath + configurations.provided
    test.compileClasspath = test.compileClasspath + configurations.provided
    test.runtimeClasspath = test.runtimeClasspath + configurations.provided
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()

        force "com.fasterxml.jackson.core:jackson-core:$jacksonVer"
        force "com.fasterxml.jackson.core:jackson-databind:$jacksonVer"
        force "com.fasterxml.jackson.core:jackson-annotations:$jacksonVer"
        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:$jacksonVer"
        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVer"
        force "org.apache.httpcomponents:httpclient:$httpClientVer"
        force "org.apache.httpcomponents:httpcore:$httpCoreVer"
        force "org.slf4j:slf4j-api:$slf4jVer"
        force "org.ow2.asm:asm:$asmVer"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
//    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
//    maven { url 'https://maven.java.net/content/repositories/snapshots' }
}

test {
    beforeTest { desc ->
        logger.quiet("Running test: " + desc)
    }

    afterTest { desc, result ->
        if(result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
            if(result.exception != null) {
                result.exception.printStackTrace()
            }
        }
    }
}

dependencies {
    compile "co.paralleluniverse:quasar-core:${quasarVer}${classifier}"
    compile "co.paralleluniverse:quasar-actors:$quasarVer"

    compile "co.paralleluniverse:comsat-jersey-server:$comsatVer"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVer"
    compile "co.paralleluniverse:comsat-httpclient:$comsatVer"

    compile "co.paralleluniverse:comsat-actors-api:$comsatVer"
    compile "co.paralleluniverse:comsat-actors-api:$comsatVer"
    compile "co.paralleluniverse:comsat-actors-servlet:$comsatVer"
    compile "co.paralleluniverse:comsat-test-utils:$comsatVer"

    compile "org.slf4j:slf4j-api:$slf4jVer"

    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVer"

    provided "javax.servlet:javax.servlet-api:$servletVer"

    quasar "co.paralleluniverse:quasar-core:${quasarVer}${classifier}@jar"

    runtime "org.slf4j:slf4j-simple:$slf4jVer"

	capsule "co.paralleluniverse:capsule:$capsuleVersion"
	capsuleMaven "co.paralleluniverse:capsule-maven:$capsuleVersion"

	testCompile "junit:junit:$junitVer"
}

def getDependencies(config) {
	return config.getAllDependencies().collect {
		def res = it.group + ':' + it.name + ':' + it.version + (!it.artifacts.isEmpty() ? ':' + it.artifacts.iterator().next().classifier : '')
		if(!it.excludeRules.isEmpty()) {
			res += "(" + it.excludeRules.collect { it.group + ':' + it.module }.join(',') + ")"
		}
		return res
	}
}

task capsule(type: Jar, dependsOn: classes) {
    archiveName = "quasar-stocks-thin.jar"

    from sourceSets.main.output // this way we don't need to extract

    from { configurations.capsule.collect { zipTree(it) } } // we need all of Capsule's classes
    from { configurations.capsuleMaven.collect { zipTree(it) } } // we need all of Capsule's classes

    manifest {
        attributes (
            'Premain-Class'     : 'Capsule',
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'Extract-Capsule'   : 'false', // don't extract capsule to the filesystem
            'Min-Java-Version'  : '1.8.0',
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),
            'Dependencies'      : getDependencies(configurations.runtime).join(' '),
            'Repositories'      : 'central https://oss.sonatype.org/content/repositories/snapshots',

            'Caplets'           : 'MavenCapsule'
        )
    }
}

task fatCapsule(type: Jar, dependsOn: jar) {
    archiveName = "quasar-stocks-fat.jar"

    from jar // embed our application jar
    from { configurations.runtime } // embed dependencies

    from 'log4j.xml'

    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class

    manifest {
        attributes (
            'Premain-Class'     : 'Capsule',
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'Min-Java-Version'  : '1.8.0',
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),
        )
    }
}

applicationDefaultJvmArgs = [
	"-javaagent:${configurations.quasar.singleFile}",
	"-Dco.paralleluniverse.fibers.verifyInstrumentation=true"
]

defaultTasks 'capsule'
