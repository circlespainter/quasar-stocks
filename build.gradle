apply plugin: 'java'

apply plugin: 'application'

mainClassName = "quasarstocks.Application"

version             = '0.1.0-SNAPSHOT'
status              = 'integration'
description         = 'Quasar WebActors StockActors'

ext.classifier      = ':' // ':jdk8'
sourceCompatibility = 1.7     // 1.8
targetCompatibility = 1.7     // 1.8

ext.slf4jVer        = '1.7.21'
ext.log4jVer        = '1.2.17'
ext.servletVer      = '3.0.1'
ext.comsatVer       = '0.7.0'
ext.quasarVer       = '0.7.4'
ext.jacksonVer      = '2.7.0'
ext.junitVer        = '4.12'
ext.asmVer          = '5.0.4'
ext.httpClientVer   = '4.5.1'
ext.httpCoreVer     = '4.4.4'
ext.jerseyVer       = '2.22.2'
ext.guavaVer        = '19.0'

ext.capsuleVersion  = '1.0.2-SNAPSHOT'
ext.capsuleMavenVersion  = '1.0.2-SNAPSHOT'
ext.capsuleDaemonVersion  = '0.2.0-SNAPSHOT'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

configurations {
    quasar
    provided
    capsule
    capsuleMaven
    capsuleDaemon
}

sourceSets {
    main.compileClasspath = main.compileClasspath + configurations.provided
    test.compileClasspath = test.compileClasspath + configurations.provided
    test.runtimeClasspath = test.runtimeClasspath + configurations.provided
}

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()

        force "co.paralleluniverse:quasar-core:$quasarVer"
        force "co.paralleluniverse:quasar-actors:$quasarVer"
        force "com.fasterxml.jackson.core:jackson-core:$jacksonVer"
        force "com.fasterxml.jackson.core:jackson-databind:$jacksonVer"
        force "com.fasterxml.jackson.core:jackson-annotations:$jacksonVer"
        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:$jacksonVer"
        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVer"
        force "org.glassfish.jersey.core:jersey-common:$jerseyVer"
        force "org.apache.httpcomponents:httpclient:$httpClientVer"
        force "org.apache.httpcomponents:httpcore:$httpCoreVer"
        force "org.slf4j:slf4j-api:$slf4jVer"
        force "org.ow2.asm:asm:$asmVer"
        force "com.google.guava:guava:$guavaVer"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
//    maven { url "https://oss.sonatype.org/content/repositories/releases" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
//    maven { url 'https://maven.java.net/content/repositories/snapshots' }
}

test {
    beforeTest { desc ->
        logger.quiet("Running test: " + desc)
    }

    afterTest { desc, result ->
        if(result.resultType == TestResult.ResultType.FAILURE) {
            logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
            if(result.exception != null) {
                result.exception.printStackTrace()
            }
        }
    }
}

dependencies {
    compile "co.paralleluniverse:quasar-core:${quasarVer}${classifier}"
    compile "co.paralleluniverse:quasar-actors:$quasarVer"

    compile "co.paralleluniverse:comsat-jersey-server:$comsatVer"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVer"
    compile "co.paralleluniverse:comsat-httpclient:$comsatVer"

    compile "co.paralleluniverse:comsat-actors-api:$comsatVer"
    compile "co.paralleluniverse:comsat-actors-api:$comsatVer"
    compile "co.paralleluniverse:comsat-actors-servlet:$comsatVer"
    compile "co.paralleluniverse:comsat-test-utils:$comsatVer"

    compile "org.eclipse.jetty:jetty-jmx:9.2.14.v20151106"

    compile 'org.apache.logging.log4j:log4j-api:2.4'

    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVer"

    provided "javax.servlet:javax.servlet-api:$servletVer"

    capsule "co.paralleluniverse:capsule:$capsuleVersion"
    capsuleMaven "co.paralleluniverse:capsule-maven:$capsuleMavenVersion"
    capsuleDaemon "co.paralleluniverse:capsule-daemon:$capsuleDaemonVersion"

    quasar "co.paralleluniverse:quasar-core:${quasarVer}${classifier}@jar"

    runtime 'org.apache.logging.log4j:log4j-core:2.4'

    testCompile "junit:junit:$junitVer"
}

def getDependencies(config) {
	return config.getAllDependencies().collect {
		def res = it.group + ':' + it.name + ':' + it.version
		if(!it.excludeRules.isEmpty()) {
			res += "(" + it.excludeRules.collect { it.group + ':' + it.module }.join(',') + ")"
		}
		return res
	}
}

run {
    // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
    systemProperty 'co.paralleluniverse.fibers.detectRunawayFibers', 'false'
}

task thinCapsule(type: Jar, dependsOn: classes) {
    archiveName = "quasar-stocks-thin.jar"

    from sourceSets.main.output // this way we don't need to extract

    from { configurations.capsule.collect { zipTree(it) } } // we need all of Capsule's classes
    from { configurations.capsuleMaven.collect { zipTree(it) } } // we need all of Capsule Maven's classes

    from 'log4j2.xml'

    manifest {
        attributes (
            'Premain-Class'     : 'Capsule',
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'Extract-Capsule'   : 'false', // don't extract capsule to the filesystem
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),
            'Dependencies'      : getDependencies(configurations.runtime).join(' '),
            'Repositories'      : 'central https://oss.sonatype.org/content/repositories/snapshots',
            'Allow-Snapshots'   : 'true',

            'Caplets'           : 'MavenCapsule'
        )
    }
}

task fatCapsule(type: Jar, dependsOn: jar) {
    archiveName = "quasar-stocks-fat.jar"

    from jar // embed our application jar

    from { configurations.runtime } // embed dependencies

    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class

    from 'log4j2.xml'

    manifest {
        attributes (
            'Premain-Class'     : 'Capsule',
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),
        )
    }
}

task daemonExplodedThinCapsule(type: Jar, dependsOn: classes) {
    archiveName = "quasar-stocks-daemon-exploded-thin.jar"

    from sourceSets.main.output // this way we don't need to extract

    from { configurations.capsule.collect { zipTree(it) } } // we need all of Capsule's classes
    from { configurations.capsuleMaven.collect { zipTree(it) } } // we need all of Capsule's classes
    from { configurations.capsuleDaemon.collect { zipTree(it) } } // we need all of Capsule Shield's classes

    from 'log4j2.xml'

    manifest {
        attributes (
            'Premain-Class'     : 'Capsule',
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'Extract-Capsule'   : 'false', // don't extract capsule to the filesystem
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),
            'Dependencies'      : getDependencies(configurations.runtime).join(' '),
            'Repositories'      : 'central https://oss.sonatype.org/content/repositories/snapshots',

            'Caplets'           : 'MavenCapsule DaemonCapsule'
        )
    }
}

task daemonExplodedFatCapsule(type: Jar, dependsOn: jar) {
    archiveName = "quasar-stocks-daemon-exploded-fat.jar"

    from jar // embed our application jar
    from { configurations.runtime } // embed dependencies

    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class
    from { configurations.capsuleDaemon.collect { zipTree(it) } } // we need all of Capsule Shield's classes

    from 'log4j2.xml'

    manifest {
        attributes (
            'Premain-Class': 'Capsule',
            'Main-Class': 'Capsule',
            'Application-Class': mainClassName,
            'Application-Version': version,
            'JVM-Args': run.jvmArgs.join(' '),
            'System-Properties': run.systemProperties.collect { k, v -> "$k=$v" }.join(' '),
            'Java-Agents': getDependencies(configurations.quasar).iterator().next(),

            'Caplets': 'DaemonCapsule'
        )
    }
}

task daemonEmbeddedThinCapsule(type: Jar, dependsOn: jar) {
    archiveName = "quasar-stocks-daemon-embedded-thin.jar"

    from sourceSets.main.output // this way we don't need to extract

    from { configurations.capsule.collect { zipTree(it) } } // we need all of Capsule's classes
    from { configurations.capsuleMaven.collect { zipTree(it) } } // we need all of Capsule Maven's classes
    from { configurations.capsuleDaemon.iterator().next() } // we need the Capsule Shield JAR

    from 'log4j2.xml'

    manifest {
        attributes (
            'Premain-Class'     : 'Capsule',
            'Main-Class'        : 'Capsule',
            'Application-Class' : mainClassName,
            'Application-Version' : version,
            'Extract-Capsule'   : 'false', // don't extract capsule to the filesystem
            'JVM-Args'          : run.jvmArgs.join(' '),
            'System-Properties' : run.systemProperties.collect { k,v -> "$k=$v" }.join(' '),
            'Java-Agents'       : getDependencies(configurations.quasar).iterator().next(),
            'Dependencies'      : getDependencies(configurations.runtime).join(' '),
            'Repositories'      : 'central https://oss.sonatype.org/content/repositories/snapshots',
            'Java-Version'  : '1.7.0',

            'Caplets': 'MavenCapsule co.paralleluniverse:capsule-daemon:0.2.0-SNAPSHOT'
        )
    }
}

task daemonEmbeddedFatCapsule(type: Jar, dependsOn: jar) {
    archiveName = "quasar-stocks-daemon-embedded-fat.jar"

    from jar // embed our application jar
    from { configurations.runtime } // embed dependencies

    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class
    from { configurations.capsuleDaemon.iterator().next() } // we need the Capsule Shield JAR

    from 'log4j2.xml'

    manifest {
        attributes (
            'Premain-Class': 'Capsule',
            'Main-Class': 'Capsule',
            'Application-Class': mainClassName,
            'Application-Version': version,
            'JVM-Args': run.jvmArgs.join(' '),
            'System-Properties': run.systemProperties.collect { k, v -> "$k=$v" }.join(' '),
            'Java-Agents': getDependencies(configurations.quasar).iterator().next(),

            'Caplets': 'co.paralleluniverse:capsule-daemon:0.2.0-SNAPSHOT'
        )
    }
}

applicationDefaultJvmArgs = [
    "-javaagent:${configurations.quasar.singleFile}"
]

defaultTasks 'capsule'
